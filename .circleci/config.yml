version: 2
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
  #      - run:
  #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
  #         command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Build
          command: ./gradlew assembleRelease
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/outputs/apk
          destination: release
      - persist_to_workspace:
          # store build results for downstream deploy job
          root: ./app
          paths: build # relative to root path

  test:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: Run Tests
          # TODO split into separeate jobs / commands ?
          # ./gradlew lint
          # ./ gradlew test
          command: ./gradlew lint test
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results
            # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
      - run:
          name: PrintReportsDirContent
          command: ls -al app/build/reports
      - run:
          name: PrintTestResultsDirContent
          command: ls -al app/build/test-results

  deploy:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - attach_workspace:
          at: app
      - run:
          name: CheckBuildArtifactsExistance
          command: |
            echo "folder app/build/outputs/apk:"
            if [ -d ./app/build/outputs/apk ]
              then echo "exists"
              else echo "doesn't exist"
            fi

            echo

            echo "folder app/build/outputs/apk/release/:"
            if [ -d ./app/build/outputs/apk/release/ ]
              then echo "exists"
              else echo "doesn't exist"
            fi

            echo

            echo "file app/build/outputs/apk/release/app-release.apk:"
            if [ -f ./app/build/outputs/apk/release/app-release.apk ]
              then echo "exists"
              else echo "doesn't exist"
            fi

            echo

            echo "folder app/build/intermediates:"
            if [ -d ./app/build/intermediates ]
             then echo "exists"
             else echo "doesn't exit"
            fi
      - deploy:
          name: Deploy APK.
          command: ./scripts/deploy-fabric.sh # bash <command> works
#          command: ./gradlew crashlyticsUploadDistributionRelease

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test
      - deploy:
          # TODO maybe need to pass or store build artifacts before deployment
          requires:
            - build
            - test
          filters:
            branches:
              ignore: master # change ignore -> master
