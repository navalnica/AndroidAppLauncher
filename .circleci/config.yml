version: 2

aliases:

# Gradle cache aliases

# due to the immutability of caches
# v1 prefix allows to regenerate cache by incrementing version
- &restore-gradle-cache
    name: Restore Gradle cache
    key: v1-gradle-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}-{{ checksum "app/keystore.properties" }}
- &save-gradle-cache
    name: Save Gradle cache
    key: v1-gradle-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}-{{ checksum "app/keystore.properties" }}
    paths:
      - ~/.gradle

jobs:


  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: Test Context
          command: echo "FOO: ${FOO}"
      - restore_cache: *restore-gradle-cache
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache: *save-gradle-cache
      - run:
          name: Build
          command: ./gradlew assembleRelease
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/outputs/apk
          destination: release
      - persist_to_workspace:
          # store build results for downstream deploy job
          root: ./app
          paths: build # relative to root path


  unit tests:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache: *restore-gradle-cache
      - run:
          name: Run Unit Tests
          command: ./gradlew test
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results


  static tests:
    working_directory: ~/code
    docker:
    - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
    - checkout
    - restore_cache: *restore-gradle-cache
    - run:
        name: Lint
        command: ./gradlew lint
    - run:
        name: Checkstyle
        command: ./gradlew checkstyle
    - run:
        name: Findbugs
        command: ./gradlew androidFindbugs
    - run:
        name: PMD
        command: ./gradlew androidPmd
    - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
        path: app/build/reports
        destination: reports
    - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
        path: app/build/test-results


  deploy to Fabric:
    working_directory: ~/code
    docker:
    - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
    - checkout
    - restore_cache: *restore-gradle-cache
    - attach_workspace:
        at: app
    - run:
        name: Check some of build results existance before deployment
        command: |
          if [[ -f ./app/build/outputs/apk/release/app-release.apk
          && -d ./app/build/intermediates ]]
            then echo "check passed"
            else echo "some files do not exist"
          fi
    - deploy:
        name: Deploy APK
        command: ./gradlew crashlyticsUploadDistributionRelease


  deploy to AppCenter:
    working_directory: ~/code
    # the curl package is not installed on Android image
    # so we use another docker image
    docker:
      - image: circleci/node:chakracore-8-browsers-legacy
    steps:
    - checkout
    - restore_cache: *restore-gradle-cache
    - attach_workspace:
        at: app
    - run:
        name: Check some of build results existance before deployment
        command: |
          if [[ -f ./app/build/outputs/apk/release/app-release.apk
          && -d ./app/build/intermediates ]]
            then echo "check passed"
            else echo "some files do not exist"
          fi
    - deploy:
        name: Deploy APK
        command: sudo bash scripts/uploadToAppCenter.sh


workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          context: AppCenter
      - static tests
      - unit tests
      - deploy to Fabric:
          requires:
            - build
            - static tests
            - unit tests
          filters:
            branches:
              # TODO change: feature -> dev (master)
              only: feature
      - deploy to AppCenter:
          context: AppCenter
          requires:
          - build
          - static tests
          - unit tests
          filters:
            branches:
              # TODO change: feature -> dev (master)
              only: feature
